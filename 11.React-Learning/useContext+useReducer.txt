***********Learned how to use useContext + useReducer***************

import React, { useReducer, useContext, createContext } from "react";

const initialContext = {
  count: 0,
};

const reducer = (state, action) => {
  if (action.type === "INC") {
    return {
      ...state,
      count: state.count + 1,
    };
  } else if (action.type === "DEC") {
    return {
      ...state,
      count: state.count - 1,
    };
  } else {
    return state;
  }
};

// Creating Context
const CountContext = createContext();

// Creating Provider
const CountProvider = ({ children }) => {
  const [state, dispatch] = useReducer(reducer, initialContext);
  return (
    <CountContext.Provider value={{ state, dispatch }}>
      {children}
    </CountContext.Provider>
  );
};

const Counter = () => {
  const { state, dispatch } = useContext(CountContext);
  return (
    <>
      <div className="bg-black text-white">
        <h1>{state.count}</h1>
        <button onClick={() => dispatch({ type: "INC" })}>Increment</button>
        <button onClick={() => dispatch({ type: "DEC" })}>Decrement</button>
      </div>
    </>
  );
};
const Counter2 = () => {
  const { state, dispatch } = useContext(CountContext);
  return (
    <>
      <div className="bg-black text-white">
        <h1>Counter 2</h1>
        <h1>{state.count}</h1>
        <button onClick={() => dispatch({ type: "INC" })}>Increment</button>
        <button onClick={() => dispatch({ type: "DEC" })}>Decrement</button>
      </div>
    </>
  );
};

const App = () => {
  return (
    <>
      <CountProvider>
        <Counter />
      </CountProvider>
      <CountProvider>
        <Counter2 />
      </CountProvider>
    </>
  );
};

export default App;






***********Practiced how to use useContext + useReducer***************


import React, { useReducer, useContext, createContext } from "react";

const initialContext = {
  count: 0,
};

const reducer = (state, action) => {
  if (action.type === "INC") {
    return {
      ...state,
      count: state.count + 1,
    };
  } else if (action.type === "DEC") {
    return {
      ...state,
      count: state.count - 1,
    };
  } else {
    return state;
  }
};

// Creating Context
const CountContext = createContext();

// Creating Provider
const CountProvider = ({ children }) => {
  const [state, dispatch] = useReducer(reducer, initialContext);
  return (
    <CountContext.Provider value={{ state, dispatch }}>
      {children}
    </CountContext.Provider>
  );
};

const Counter = () => {
  const { state, dispatch } = useContext(CountContext);
  return (
    <>
      <div className="bg-black text-white">
        <h1>Counter 1</h1>
        <h1>{state.count}</h1>
        <button onClick={() => dispatch({ type: "INC" })}>Increment</button>
        <button onClick={() => dispatch({ type: "DEC" })}>Decrement</button>
      </div>
    </>
  );
};

const App = () => {
  return (
    <>
      <CountProvider>
        <Counter />
      </CountProvider>
    </>
  );
};

export default App;
